一、代理模式
	1、作用：控制访问某个对象的方法，调用方法前可以做前置处理，调用方法后可以做后置处理（AOP的微观实现）
	2、角色：
			抽象角色（接口）：定义公共对外方法
			真实角色（周杰伦）：业务逻辑
			代理角色（代理人）：调用真实角色完成业务逻辑，并可附加自己的操作

	3、静态代理缺陷：
			 大量代码重复
			 只能代理一种类型的对象
	4、动态代理
		a、jdk自带的动态代理
			 java.lang.reflect.InvocationHandler：通过invoke调用真实角色
			 java.lang.reflect.Proxy：动态生成代理类的对象

			好处：
				抽象角色中(接口)声明的所有方法都被转移到调用处理器一个集中的方法中处理，
					这样，我们可以更加灵活和统一的处理众多的方法。
				能代理任意类型的对象

		b、Cglib的动态代理
			和jdk代理的区别：没有接口
			原理：生成代理类的子类，在子类中调用父类并可附加自己的操作

二、分布式事务		
	1、分布式事务产生的场景
		两个service---->一个数据库
		一个service---->两个数据库

	2、可靠消息最终一致性方案介绍
		可靠消息：消息成功消费
		最终一致性：事务参与方最终完成事务

	3、可靠消息最终一致性要解决的问题
		1、上游服务把消息成功发送：
			本地消息表：消息记录表（orderId、status） + quartz（定时扫描、再发送消息）
			 
		2、下游服务把消息成功消费
			持久化+手动确认方案：持久化（mq宕机消息不丢失）、手动确认（任务处理失败消息还在容器中）

		3、消息做幂
			 消息去重表		