关闭超时订单
	1. 定义job扫描订单表：
        a、修改订单的状态为关闭状态、结束时间、关闭时间、修改时间为当前时间
	    b、把订单中商品的库存数量加回去
		  扫描条件：状态是未付款 并且 创建时间 <= 当前时间 – 2天  并且付款方式为在线支付的订单

	2. 定义触发条件
		a、理论上需要实时触发（性能问题）
		b、1分钟触发一次 0 */1 * * * ?
		
	 <!--查询超时订单  -->
	  <select id="selectOvertimeOrder" resultMap="BaseResultMap">
		  SELECT
			  *
		  FROM
			  tb_order
		  WHERE
			  create_time &lt;= DATE_SUB(NOW(), INTERVAL 2 DAY)
		  AND status = 1
		  AND payment_type = 1
	  </select>	
	
	quartz：
		@Autowired
		private OrderService orderService;

		/**
		 * 关闭超时订单
		 */
		@Override
		public void execute(JobExecutionContext context) throws JobExecutionException {
			//1、查询超时订单
			 List<TbOrder> tbOrderList = orderService.selectOverTimeTbOrder();

			//2、关闭超时订单
			for (int i = 0; i < tbOrderList.size(); i++) {
				TbOrder tbOrder =  tbOrderList.get(i);
				orderService.updateOverTimeTbOrder(tbOrder);

				//3、把超时订单中的商品库存数量加回去
				orderService.updateTbItemByOrderId(tbOrder.getOrderId());
			}
		}
	
	Factory：
		@Component("myAdaptableJobFactory")
		public class MyAdaptableJobFactory extends AdaptableJobFactory {

			//AutowireCapableBeanFactory 可以将一个对象添加到SpringIOC容器中，并且完成该对象注入
			@Autowired
			private AutowireCapableBeanFactory autowireCapableBeanFactory;

			/**
			 * 解决任务类中注入service报错问题：
			 * 	该方法将需要实例化的任务对象手动的添加到springIOC容器中并且完成对象的注入
			 */
			@Override
			protected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {
				Object obj = super.createJobInstance(bundle);
				//将obj对象添加Spring IOC容器中，并完成注入
				this.autowireCapableBeanFactory.autowireBean(obj);
				return obj;
			}
	
	config：
		/**
		 * Quartz配置类
		 */
		@Configuration
		public class QuartzConfig {
			
			/**
			 * 1.创建Job对象
			 */
			@Bean
			public JobDetailFactoryBean jobDetailFactoryBean(){
				JobDetailFactoryBean factory = new JobDetailFactoryBean();
				//关联我们自己的Job类
				factory.setJobClass(OrderQuartz.class);
				return factory;
			}
			
			/**
			 * Cron Trigger
			 */
		   @Bean
			public CronTriggerFactoryBean cronTriggerFactoryBean(JobDetailFactoryBean 
																 jobDetailFactoryBean){
				CronTriggerFactoryBean factory = new CronTriggerFactoryBean();
				factory.setJobDetail(jobDetailFactoryBean.getObject());
				//设置触发时间
				//factory.setCronExpression("0/2 * * * * ?");
				factory.setCronExpression("0 */1 * * * ?");
				return factory;
			}

			/**
			 * 3.创建Scheduler对象
			 */
			@Bean
			public SchedulerFactoryBean schedulerFactoryBean(CronTriggerFactoryBean
							cronTriggerFactoryBean, MyAdaptableJobFactory myAdaptableJobFactory){
				SchedulerFactoryBean factory = new SchedulerFactoryBean();
				//关联trigger
				factory.setTriggers(cronTriggerFactoryBean.getObject());
				factory.setJobFactory(myAdaptableJobFactory);
				return factory;
			}

quartz集群任务重复执行问题
		quartz 在集群的时候，任务会出现重复执行的情况
		使用redis分布式锁解决quartz 集群任务重复执行的问题
			
		quartz：
			/**
			 * 关闭超时订单
			 */
			@Override
			public void execute(JobExecutionContext context) throws JobExecutionException {
				String ip = null;
				try {
					ip = InetAddress.getLocalHost().getHostAddress();
				} catch (UnknownHostException e) {
					e.printStackTrace();
				}
				//解决quartz集群任务重复执行
				if(redisClient.setnx("SETNX_LOCK_ORDER_KEY",ip,30)) {
					//... ... ... 关闭超时订单业务
					redisClient.del("SETNX_LOCK_ORDER_KEY");
				}else{
					System.out.println(
						"============机器："+ip+" 占用分布式锁，任务正在执行=======================");
				}
			}
